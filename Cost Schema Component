import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  SafeAreaView,
  TextInput,
} from 'react-native';

/**
 * Schema Component for OneWORLD Scenario Planner
 * 
 * This component provides a configurable interface for setting
 * cost and revenue ranges that will be used throughout the
 * scenario planning application.
 */
const SchemaSettings = ({ onSave }) => {
  // Initial schema state with all cost and revenue categories
  const [schema, setSchema] = useState({
    // COSTS
    employeeCosts: {
      title: "Employee Costs",
      categories: [
        {
          name: "Product Manager",
          year1: { min: 720000, max: 900000 },
          year2: { min: 756000, max: 945000 },
          year3: { min: 794000, max: 992000 },
          year4: { min: 834000, max: 1042000 },
          notes: "Senior-level PM with marketplace experience"
        },
        {
          name: "Frontend Developers",
          year1: { min: 1200000, max: 1800000 },
          year2: { min: 1680000, max: 2520000 },
          year3: { min: 1920000, max: 2880000 },
          year4: { min: 2100000, max: 3150000 },
          notes: "2-3 developers Y1, 3-4 in Y2/Y3"
        },
        {
          name: "Backend Developers",
          year1: { min: 1320000, max: 1980000 },
          year2: { min: 1848000, max: 2772000 },
          year3: { min: 2112000, max: 3168000 },
          year4: { min: 2310000, max: 3465000 },
          notes: "2-3 developers Y1, 3-4 in Y2/Y3"
        },
        {
          name: "UX/UI Designer",
          year1: { min: 600000, max: 900000 },
          year2: { min: 630000, max: 945000 },
          year3: { min: 662000, max: 992000 },
          year4: { min: 695000, max: 1042000 },
          notes: "1-2 designers"
        },
        {
          name: "QA Engineer",
          year1: { min: 480000, max: 720000 },
          year2: { min: 744000, max: 1116000 },
          year3: { min: 864000, max: 1296000 },
          year4: { min: 945000, max: 1418000 },
          notes: "1 engineer Y1, 2 in Y2/Y3"
        },
        {
          name: "DevOps Engineer",
          year1: { min: 720000, max: 960000 },
          year2: { min: 756000, max: 1008000 },
          year3: { min: 794000, max: 1058000 },
          year4: { min: 834000, max: 1111000 },
          notes: "1 senior DevOps"
        },
        {
          name: "Business Analyst",
          year1: { min: 600000, max: 840000 },
          year2: { min: 630000, max: 882000 },
          year3: { min: 662000, max: 926000 },
          year4: { min: 695000, max: 972000 },
          notes: "1 analyst"
        }
      ]
    },
    techDevelopment: {
      title: "Tech Development",
      categories: [
        {
          name: "Cloud Infrastructure",
          year1: { min: 240000, max: 480000 },
          year2: { min: 360000, max: 720000 },
          year3: { min: 480000, max: 960000 },
          year4: { min: 600000, max: 1200000 },
          notes: "AWS/Azure/GCP services"
        },
        {
          name: "Firebase Services",
          year1: { min: 120000, max: 240000 },
          year2: { min: 180000, max: 360000 },
          year3: { min: 240000, max: 480000 },
          year4: { min: 300000, max: 600000 },
          notes: "Auth, Firestore, Functions"
        },
        {
          name: "Vertex AI Implementation",
          year1: { min: 180000, max: 360000 },
          year2: { min: 240000, max: 480000 },
          year3: { min: 300000, max: 600000 },
          year4: { min: 360000, max: 720000 },
          notes: "ML model development and API usage"
        },
        {
          name: "Third-Party APIs/Services",
          year1: { min: 120000, max: 240000 },
          year2: { min: 180000, max: 360000 },
          year3: { min: 240000, max: 480000 },
          year4: { min: 300000, max: 600000 },
          notes: "Payment processing, mapping, etc."
        },
        {
          name: "DevOps Tooling",
          year1: { min: 60000, max: 120000 },
          year2: { min: 72000, max: 144000 },
          year3: { min: 84000, max: 168000 },
          year4: { min: 96000, max: 192000 },
          notes: "CI/CD, monitoring, logging"
        },
        {
          name: "Security Implementation",
          year1: { min: 120000, max: 240000 },
          year2: { min: 144000, max: 288000 },
          year3: { min: 168000, max: 336000 },
          year4: { min: 192000, max: 384000 },
          notes: "Penetration testing, security audits"
        }
      ]
    },
    operationalCosts: {
      title: "Operational Costs",
      categories: [
        {
          name: "Office Space",
          year1: { min: 240000, max: 480000 },
          year2: { min: 252000, max: 504000 },
          year3: { min: 265000, max: 529000 },
          year4: { min: 278000, max: 555000 },
          notes: "Based on team size growth"
        },
        {
          name: "Equipment",
          year1: { min: 180000, max: 300000 },
          year2: { min: 120000, max: 240000 },
          year3: { min: 144000, max: 288000 },
          year4: { min: 168000, max: 336000 },
          notes: "Higher in Y1 for initial setup"
        },
        {
          name: "Software Licenses",
          year1: { min: 120000, max: 240000 },
          year2: { min: 144000, max: 288000 },
          year3: { min: 168000, max: 336000 },
          year4: { min: 192000, max: 384000 },
          notes: "Design tools, development tools, etc."
        },
        {
          name: "Legal & Compliance",
          year1: { min: 180000, max: 360000 },
          year2: { min: 120000, max: 240000 },
          year3: { min: 144000, max: 288000 },
          year4: { min: 168000, max: 336000 },
          notes: "Higher in Y1 for initial setup"
        },
        {
          name: "Marketing & Sales",
          year1: { min: 360000, max: 720000 },
          year2: { min: 540000, max: 1080000 },
          year3: { min: 720000, max: 1440000 },
          year4: { min: 900000, max: 1800000 },
          notes: "Increases as platform scales"
        },
        {
          name: "Customer Support",
          year1: { min: 240000, max: 480000 },
          year2: { min: 360000, max: 720000 },
          year3: { min: 480000, max: 960000 },
          year4: { min: 600000, max: 1200000 },
          notes: "Support team growth with user base"
        },
        {
          name: "Travel & Entertainment",
          year1: { min: 120000, max: 240000 },
          year2: { min: 144000, max: 288000 },
          year3: { min: 168000, max: 336000 },
          year4: { min: 192000, max: 384000 },
          notes: "Client meetings, industry events"
        }
      ]
    },
    // REVENUES
    transactionFees: {
      title: "Transaction Fees",
      categories: [
        {
          name: "Traditional Market",
          year1: { min: 0, max: 0 },
          year2: { min: 1800000, max: 3600000 },
          year3: { min: 3600000, max: 7200000 },
          year4: { min: 7200000, max: 14400000 },
          notes: "0.5-1% of transaction volume"
        },
        {
          name: "B2B (Beyond)",
          year1: { min: 0, max: 0 },
          year2: { min: 900000, max: 1800000 },
          year3: { min: 2700000, max: 5400000 },
          year4: { min: 5400000, max: 10800000 },
          notes: "0.3-0.6% of transaction volume"
        },
        {
          name: "Financial Services",
          year1: { min: 0, max: 0 },
          year2: { min: 600000, max: 1200000 },
          year3: { min: 1800000, max: 3600000 },
          year4: { min: 3600000, max: 7200000 },
          notes: "0.2-0.4% of transaction volume"
        }
      ]
    },
    farmerSubscriptions: {
      title: "Farmer Subscriptions",
      categories: [
        {
          name: "Small Tier",
          year1: { min: 0, max: 0 },
          year2: { min: 360000, max: 720000 },
          year3: { min: 720000, max: 1440000 },
          year4: { min: 1440000, max: 2880000 },
          notes: "R250-500/month, 120-240 farmers Y1, growing"
        },
        {
          name: "Medium Tier",
          year1: { min: 0, max: 0 },
          year2: { min: 720000, max: 1440000 },
          year3: { min: 1440000, max: 2880000 },
          year4: { min: 2880000, max: 5760000 },
          notes: "R1,000-2,000/month, 60-120 farmers Y1, growing"
        },
        {
          name: "Large Tier",
          year1: { min: 0, max: 0 },
          year2: { min: 1080000, max: 2160000 },
          year3: { min: 2160000, max: 4320000 },
          year4: { min: 4320000, max: 8640000 },
          notes: "R3,000-6,000/month, 30-60 farmers Y1, growing"
        },
        {
          name: "Enterprise Tier",
          year1: { min: 0, max: 0 },
          year2: { min: 720000, max: 1440000 },
          year3: { min: 1440000, max: 2880000 },
          year4: { min: 2880000, max: 5760000 },
          notes: "R12,000-24,000/month, 5-10 farms Y1, growing"
        }
      ]
    },
    buyerSubscriptions: {
      title: "Buyer Subscriptions",
      categories: [
        {
          name: "Informal Tier",
          year1: { min: 0, max: 0 },
          year2: { min: 180000, max: 360000 },
          year3: { min: 360000, max: 720000 },
          year4: { min: 720000, max: 1440000 },
          notes: "R100-200/month, 150-300 buyers Y1, growing"
        },
        {
          name: "Formal Tier",
          year1: { min: 0, max: 0 },
          year2: { min: 540000, max: 1080000 },
          year3: { min: 1080000, max: 2160000 },
          year4: { min: 2160000, max: 4320000 },
          notes: "R500-1,000/month, 90-180 buyers Y1, growing"
        },
        {
          name: "Wholesale Tier",
          year1: { min: 0, max: 0 },
          year2: { min: 900000, max: 1800000 },
          year3: { min: 1800000, max: 3600000 },
          year4: { min: 3600000, max: 7200000 },
          notes: "R2,500-5,000/month, 30-60 buyers Y1, growing"
        },
        {
          name: "Retail Tier",
          year1: { min: 0, max: 0 },
          year2: { min: 720000, max: 1440000 },
          year3: { min: 1440000, max: 2880000 },
          year4: { min: 2880000, max: 5760000 },
          notes: "R6,000-12,000/month, 10-20 retailers Y1, growing"
        },
        {
          name: "QSR Tier",
          year1: { min: 0, max: 0 },
          year2: { min: 540000, max: 1080000 },
          year3: { min: 1080000, max: 2160000 },
          year4: { min: 2160000, max: 4320000 },
          notes: "R9,000-18,000/month, 5-10 QSRs Y1, growing"
        }
      ]
    },
    logisticsRevenue: {
      title: "Logistics Revenue",
      categories: [
        {
          name: "LineBooker Commission",
          year1: { min: 0, max: 0 },
          year2: { min: 360000, max: 720000 },
          year3: { min: 900000, max: 1800000 },
          year4: { min: 1800000, max: 3600000 },
          notes: "5-10% of logistics facilitated"
        }
      ]
    },
    ancillaryIncome: {
      title: "Ancillary Income",
      categories: [
        {
          name: "Analytics Data",
          year1: { min: 0, max: 0 },
          year2: { min: 240000, max: 480000 },
          year3: { min: 600000, max: 1200000 },
          year4: { min: 1200000, max: 2400000 },
          notes: "Data insights for third parties"
        },
        {
          name: "Insurance Referrals",
          year1: { min: 0, max: 0 },
          year2: { min: 180000, max: 360000 },
          year3: { min: 450000, max: 900000 },
          year4: { min: 900000, max: 1800000 },
          notes: "Commission on referred insurance"
        },
        {
          name: "Financial Services",
          year1: { min: 0, max: 0 },
          year2: { min: 360000, max: 720000 },
          year3: { min: 900000, max: 1800000 },
          year4: { min: 1800000, max: 3600000 },
          notes: "Loans, credit facilitation"
        }
      ]
    }
  });

  // Track which section is expanded
  const [expandedSection, setExpandedSection] = useState(null);
  
  // Function to toggle a section's expanded state
  const toggleSection = (sectionKey) => {
    if (expandedSection === sectionKey) {
      setExpandedSection(null);
    } else {
      setExpandedSection(sectionKey);
    }
  };

  // Function to update a specific value in the schema
  const updateSchemaValue = (sectionKey, categoryIndex, year, bound, value) => {
    const numValue = parseFloat(value.replace(/[^0-9.]/g, ''));
    
    if (!isNaN(numValue)) {
      setSchema(prevSchema => {
        const newSchema = { ...prevSchema };
        newSchema[sectionKey].categories[categoryIndex][year][bound] = numValue;
        return newSchema;
      });
    }
  };

  // Format currency display
  const formatCurrency = (value) => {
    return `R${value.toLocaleString('en-ZA')}`;
  };

  // Handle save action
  const handleSave = () => {
    if (onSave) {
      onSave(schema);
    }
  };

  // Calculate totals for each year
  const calculateTotals = () => {
    const isCostSection = (sectionKey) => 
      ['employeeCosts', 'techDevelopment', 'operationalCosts'].includes(sectionKey);
    
    const totals = {
      costs: {
        year1: { min: 0, max: 0 },
        year2: { min: 0, max: 0 },
        year3: { min: 0, max: 0 },
        year4: { min: 0, max: 0 },
      },
      revenue: {
        year1: { min: 0, max: 0 },
        year2: { min: 0, max: 0 },
        year3: { min: 0, max: 0 },
        year4: { min: 0, max: 0 },
      }
    };

    Object.keys(schema).forEach(sectionKey => {
      const section = schema[sectionKey];
      const targetTotal = isCostSection(sectionKey) ? totals.costs : totals.revenue;

      section.categories.forEach(category => {
        for (let i = 1; i <= 4; i++) {
          const yearKey = `year${i}`;
          targetTotal[yearKey].min += category[yearKey].min;
          targetTotal[yearKey].max += category[yearKey].max;
        }
      });
    });

    return totals;
  };

  const totals = calculateTotals();

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView}>
        <Text style={styles.title}>OneWORLD Scenario Planner Schema</Text>
        <Text style={styles.subtitle}>Configure cost and revenue ranges for scenario planning</Text>
        
        {/* Summary Section */}
        <View style={styles.summaryContainer}>
          <Text style={styles.sectionTitle}>Summary</Text>
          
          <View style={styles.summaryTable}>
            <View style={styles.summaryRow}>
              <Text style={styles.summaryLabel}>Year</Text>
              <Text style={styles.summaryLabel}>Costs (Min)</Text>
              <Text style={styles.summaryLabel}>Costs (Max)</Text>
              <Text style={styles.summaryLabel}>Revenue (Min)</Text>
              <Text style={styles.summaryLabel}>Revenue (Max)</Text>
            </View>
            
            {[1, 2, 3, 4].map(year => (
              <View key={`summary-year-${year}`} style={styles.summaryRow}>
                <Text style={styles.summaryYear}>
                  {year === 1 ? '2026 (Startup)' : 
                   year === 2 ? '2027 (Y1)' : 
                   year === 3 ? '2028 (Y2)' : '2029 (Y3)'}
                </Text>
                <Text style={styles.summaryValue}>
                  {formatCurrency(totals.costs[`year${year}`].min)}
                </Text>
                <Text style={styles.summaryValue}>
                  {formatCurrency(totals.costs[`year${year}`].max)}
                </Text>
                <Text style={styles.summaryValue}>
                  {formatCurrency(totals.revenue[`year${year}`].min)}
                </Text>
                <Text style={styles.summaryValue}>
                  {formatCurrency(totals.revenue[`year${year}`].max)}
                </Text>
              </View>
            ))}
          </View>
        </View>
        
        {/* Schema Configuration Sections */}
        {Object.keys(schema).map(sectionKey => {
          const section = schema[sectionKey];
          const isExpanded = expandedSection === sectionKey;
          
          return (
            <View key={sectionKey} style={styles.sectionContainer}>
              <TouchableOpacity 
                style={styles.sectionHeader} 
                onPress={() => toggleSection(sectionKey)}
              >
                <Text style={styles.sectionTitle}>{section.title}</Text>
                <Text style={styles.expandIcon}>{isExpanded ? '▼' : '►'}</Text>
              </TouchableOpacity>
              
              {isExpanded && (
                <View style={styles.sectionContent}>
                  {section.categories.map((category, categoryIndex) => (
                    <View key={`${sectionKey}-${categoryIndex}`} style={styles.categoryContainer}>
                      <Text style={styles.categoryName}>{category.name}</Text>
                      <Text style={styles.categoryNotes}>{category.notes}</Text>
                      
                      <View style={styles.yearRangesContainer}>
                        {[1, 2, 3, 4].map(year => {
                          const yearKey = `year${year}`;
                          const yearLabel = year === 1 ? '2026' : 
                                          year === 2 ? '2027' : 
                                          year === 3 ? '2028' : '2029';
                          
                          return (
                            <View key={`${sectionKey}-${categoryIndex}-${yearKey}`} style={styles.yearRange}>
                              <Text style={styles.yearLabel}>{yearLabel}</Text>
                              <View style={styles.rangeInputs}>
                                <TextInput
                                  style={styles.rangeInput}
                                  value={formatCurrency(category[yearKey].min)}
                                  onChangeText={(value) => 
                                    updateSchemaValue(sectionKey, categoryIndex, yearKey, 'min', value)
                                  }
                                  keyboardType="numeric"
                                />
                                <Text style={styles.rangeSeparator}>-</Text>
                                <TextInput
                                  style={styles.rangeInput}
                                  value={formatCurrency(category[yearKey].max)}
                                  onChangeText={(value) => 
                                    updateSchemaValue(sectionKey, categoryIndex, yearKey, 'max', value)
                                  }
                                  keyboardType="numeric"
                                />
                              </View>
                            </View>
                          );
                        })}
                      </View>
                    </View>
                  ))}
                </View>
              )}
            </View>
          );
        })}
        
        <TouchableOpacity style={styles.saveButton} onPress={handleSave}>
          <Text style={styles.saveButtonText}>Save Schema</Text>
        </TouchableOpacity>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
    padding: 16,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 8,
    color: '#333',
  },
  subtitle: {
    fontSize: 16,
    marginBottom: 24,
    color: '#666',
  },
  summaryContainer: {
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 16,
    marginBottom: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  summaryTable: {
    marginTop: 12,
  },
  summaryRow: {
    flexDirection: 'row',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  summaryLabel: {
    flex: 1,
    fontWeight: 'bold',
    fontSize: 12,
  },
  summaryYear: {
    flex: 1,
    fontSize: 14,
  },
  summaryValue: {
    flex: 1,
    fontSize: 14,
  },
  sectionContainer: {
    backgroundColor: '#fff',
    borderRadius: 8,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
    overflow: 'hidden',
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#f0f0f0',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  expandIcon: {
    fontSize: 16,
    color: '#666',
  },
  sectionContent: {
    padding: 16,
  },
  categoryContainer: {
    marginBottom: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
    paddingBottom: 16,
  },
  categoryName: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  categoryNotes: {
    fontSize: 14,
    color: '#666',
    marginBottom: 12,
    fontStyle: 'italic',
  },
  yearRangesContainer: {
    
  },
  yearRange: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  yearLabel: {
    width: 50,
    fontSize: 14,
  },
  rangeInputs: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
  },
  rangeInput: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 4,
    padding: 8,
    fontSize: 14,
  },
  rangeSeparator: {
    marginHorizontal: 8,
    color: '#666',
  },
  saveButton: {
    backgroundColor: '#4CAF50',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 16,
    marginBottom: 40,
  },
  saveButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default SchemaSettings;
